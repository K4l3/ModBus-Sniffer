byte wrposs = 0;           //Possition to write the next byte to 
byte rposs = 0;            //Possition to read from - must be x amount of spaces behind wrposs
byte data[255];            //Arry to store bytes in
byte testreg = 0;          //Test location for data to be sent to
bool messread = false;    //message beign checked and recieved.
byte messlng = 0;          //used to count bytes till ennd of massage - allow pull full message from buffer
bool cmpmess = false;     //used to indicate full message pulled from buffer. 
byte devadd = 0;           //device address
byte reglng = 0;           //device register length in number of bytes
uint32_t regval = 0;     //register value


unsigned long startMillis;  //some global variables available anywhere in the program
unsigned long currentMillis;


void setup() {
  Serial.begin(115200);
  Serial1.begin(115200);

}

void loop() {
  //read from buffer to array, check if data good. either moves to next step or steps to next reading
  if (Serial1.available() > 0) {
    data[wrposs] = Serial1.read();
    wrposs++;  
    
    if (messread == false && wrposs - rposs > 10){
      //read possition 10byte behind wrposs. Message come through, check replay using correct digits, check length expected and parse. if not moce 1 space up and try again. add timeout function
      if (data[rposs] == data[rposs + 8] && data[rposs + 1] == data[rposs + 9]) { //better to use rposs with only plus
        messread = true;
        devadd = data[rposs];
        Serial1.write(devadd);
        reglng = data[rposs + 10];     //change to read byte count from reply - check
        Serial1.write(reglng);
      }

      if (messread == false && wrposs - rposs > 10){
        data[rposs] = 0;  //clear array possition
        rposs++;
      }
    }  

    if (messread == true && wrposs > rposs + reglng + 10){
      if (reglng == 1) {regval = ((data[rposs + 11]));}  //write multiple possitions from data array to regval - check possitining 
      if (reglng == 2) {regval = ((data[rposs + 11] << 8) + (data[rposs + 12]));}
      if (reglng == 3) {regval = ((data[rposs + 11] << 16) + (data[rposs + 12] << 8) + (data[rposs + 13]));}
      if (reglng == 4) {regval = ((data[rposs + 11] << 24) +(data[rposs + 12] << 16) + (data[rposs + 13] << 8) + (data[rposs + 14]));}
      Serial1.write(data[rposs + 11]);
      Serial1.write(data[rposs + 12]);
      Serial1.print(regval);
      messread = false;
      rposs = rposs + reglng + 10;           
    }
  }
}
